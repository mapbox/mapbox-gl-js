#!/usr/bin/env node

'use strict';

// usage: describe_shaders path/to/style.json zoom

require('flow-remove-types/register');
const fs = require('fs');
const deref = require('mapbox-gl-style-spec/lib/deref');
const util = require('../js/util/util');
const shaders = require('../js/render/shaders');
const ProgramConfiguration = require('../js/data/program_configuration');
const StyleLayer = require('../js/style/style_layer');
const AnimationLoop = require('../js/style/animation_loop');

const fillProgramInterface = require('../js/data/bucket/fill_bucket').programInterface;
const circleProgramInterface = require('../js/data/bucket/circle_bucket').programInterface;
const lineProgramInterface = require('../js/data/bucket/line_bucket').programInterface;
const fillExtrusionProgramInterface = require('../js/data/bucket/fill_extrusion_bucket').programInterface;

const programInterfaces = util.extend({
    fill: fillProgramInterface,
    circle: circleProgramInterface,
    line: lineProgramInterface,
    fillExtrusion: fillExtrusionProgramInterface,
}, require('../js/data/bucket/symbol_bucket').programInterfaces);

const style = JSON.parse(fs.readFileSync(process.argv[2]));
style.layers = deref(style.layers);
const zoom = parseFloat(process.argv[3]);

const programs = {};

style.layers.forEach((layer) => {
    const shader = layer.type;
    const definition = shaders[shader];
    const programInterface = programInterfaces[layer.type];
    if (!programInterface) { return; }
    const styleLayer = new StyleLayer(layer);
    styleLayer.updatePaintTransitions([], {}, { zoom: zoom }, new AnimationLoop(), {});
    const configuration = ProgramConfiguration.createDynamic(
        programInterface.paintAttributes, styleLayer, zoom);
    const key = `${layer.type}${configuration.cacheKey || ''}`;
    const program = programs[key] = programs[key] || { layers: [] };
    program.layers.push(layer);
    if (!program.shaderSource) {
        program.shaderSource = createShaderSource(definition, configuration);
    }
});

for (const key in programs) {
    const layers = programs[key].layers;
    const shaders = programs[key].shaderSource;
    console.log(`
## ${key}

### Layers
${layers.map(layer => `* ${layer.id}`).join('\n')}

### Vertex Shader
\`\`\`glsl
${shaders.vertexSource}
\`\`\`

### Fragment Shader
\`\`\`glsl
${shaders.fragmentSource}
\`\`\`
`);
}


function createShaderSource(definition, configuration) {
    const definesSource = `#define MAPBOX_GL_JS\n#define DEVICE_PIXEL_RATIO \${browser.devicePixelRatio.toFixed(1)}\n`;
    const vertexSource = configuration.applyPragmas(definesSource + shaders.prelude.vertexSource + definition.vertexSource, 'vertex');
    const fragmentSource = configuration.applyPragmas(definesSource + shaders.prelude.fragmentSource + definition.fragmentSource, 'fragment');
    return {vertexSource, fragmentSource};
}
