version: 2.1
orbs:
  aws-cli: circleci/aws-cli@4.1.3
  browser-tools: circleci/browser-tools@1.4.8

workflows:
  default:
    jobs:
      - prepare-linux:
          filters:
            tags:
              only: /.*/
      - install-mbx-ci:
          requires:
            - prepare-linux
          filters:
            tags:
              only: /.*/
            # We can't install mbx-ci on CI runs from PR's that reference forks from external contributors
            # This is because fork's can not access our AWS credentials setup in CircleCI environment variables
            # Branch names for external contributor forks are are reported in the format pull/{PR_NUMBER} to CircleCI,
            # This RegEx is setup to ignore that.
            branches:
              ignore: /pull\/[0-9]*/
      - typecheck:
          requires:
            - prepare-linux
          filters:
            tags:
              only: /.*/
      - lint:
          requires:
            - prepare-linux
          filters:
            tags:
              only: /.*/
      - build:
          requires:
            - prepare-linux
          filters:
            tags:
              only: /.*/
      - check-ts-suppressions:
          requires:
            - install-mbx-ci
          filters:
            tags:
              only: /.*/
      - check-bundle-size:
          requires:
            - install-mbx-ci
            - build
          filters:
            tags:
              only: /.*/
      - test-typings:
          requires:
            - prepare-linux
          filters:
            tags:
              only: /.*/
      - setup-playwright:
          requires:
            - prepare-linux
          filters:
            tags:
              only: /.*/
      - test-unit:
          requires:
            - setup-playwright
          filters:
            tags:
              only: /.*/
      - test-usvg:
          requires:
            - setup-playwright
          filters:
            tags:
              only: /.*/
      - test-csp:
          requires:
            - setup-playwright
            - build
          filters:
            tags:
              only: /.*/
      - test-query:
          requires:
            - prepare-linux
          filters:
            tags:
              only: /.*/
      - test-expressions:
          requires:
            - prepare-linux
          filters:
            tags:
              only: /.*/
      - test-webpack:
          requires:
            - build
          filters:
            tags:
              only: /.*/
      - test-style-spec:
          requires:
            - prepare-linux
          filters:
            tags:
              only: /.*/
      - verify-codegen:
          requires:
            - prepare-linux
          filters:
            tags:
              only: /.*/
      - deploy-release:
          requires:
            - install-mbx-ci
            - build
          filters:
            tags:
              only: /v[0-9]+.[0-9]+.[0-9]+(-.+)?/
            branches:
              ignore: /.*/
      - test-render-linux-chrome-dev:
          requires:
            - prepare-linux
          filters:
            tags:
              only: /.*/
      - test-render-linux-chrome-prod:
          requires:
            - prepare-linux
          filters:
            tags:
              only: /.*/
      - test-render-linux-chrome-csp:
          requires:
            - prepare-linux
          filters:
            tags:
              only: /.*/
      - test-render-linux-firefox-dev:
          requires:
            - prepare-linux
          filters:
            tags:
              only: /.*/
      - prepare-mac:
          filters:
            tags:
              only: /.*/
      - test-render-mac-chrome-dev:
          requires:
            - prepare-mac
          filters:
            tags:
              only: /.*/
      - test-render-mac-safari-dev:
          requires:
            - prepare-mac
          filters:
            tags:
              only: /.*/
      - prepare-windows:
          filters:
            tags:
              only: /.*/
      - test-render-windows-chrome-dev:
          requires:
            - prepare-windows
          filters:
            tags:
              only: /.*/
      - trigger-performance-tests:
          context:
            - "sdk-cicd/circleci-api"
          filters:
            branches:
              only:
                  - internal

linux-defaults: &linux-defaults
  docker:
    - image: cimg/node:20.15-browsers
  working_directory: ~/mapbox-gl-js

mac-defaults: &mac-defaults
  resource_class: macos.m1.medium.gen1
  macos:
    # https://circleci.com/docs/using-macos/#supported-xcode-versions-silicon
    xcode: 14.3.1 # macOS 13.2.1 (Ventura)
  environment:
    HOMEBREW_NO_AUTO_UPDATE: 1
  working_directory: ~/mapbox-gl-js

windows-defaults: &windows-defaults
  resource_class: windows.medium
  machine:
      image: default
      shell: powershell.exe -ExecutionPolicy Bypass
  working_directory: ~/mapbox-gl-js

jobs:
  prepare-linux:
    <<: *linux-defaults
    steps:
      - checkout
      - restore_cache:
          keys:
            - v0-linux-npm-{{ .Branch }}-{{ checksum "package-lock.json" }}
            - v0-linux-npm-{{ .Branch }}-
            - v0-linux-npm-
      - run: npm ci --no-audit --no-fund
      - run: npm run build-dev
      - save_cache:
          key: v0-linux-npm-{{ .Branch }}-{{ checksum "package-lock.json" }}
          paths:
            - ~/.npm
      - persist_to_workspace:
          root: ~/
          paths:
            - mapbox-gl-js
            - .ssh

  install-mbx-ci:
    <<: *linux-defaults
    steps:
      - run:
          name: Install mbx-ci
          command: |
            curl -Ls https://mapbox-release-engineering.s3.amazonaws.com/mbx-ci/latest/mbx-ci-linux-amd64 > ~/mbx-ci &&
            chmod 755 ~/mbx-ci &&
            ~/mbx-ci aws setup
      # mbx-ci stores credentials in these directories, so they must be explictly passed along to dependent jobs via workspaces
      - persist_to_workspace:
          root: ~/
          paths:
            - .ssh
            - .aws
            - mbx-ci

  typecheck:
    <<: *linux-defaults
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Typecheck
          command: |
            npm run tsc

  lint:
    <<: *linux-defaults
    steps:
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys:
            - v2-lint-{{ .Branch }}
            - v2-lint
      - run: npm run lint
      - run: npm run lint-css
      - save_cache:
          key: v2-lint-{{ .Branch }}-{{ .Revision }}
          paths:
            - '.eslintcache'

  build:
    <<: *linux-defaults
    steps:
      - attach_workspace:
          at: ~/
      - run: npm run build-prod-min
      - run: npm run build-prod
      - run: npm run build-csp
      - run: npm run build-css
      - run: npm run build-style-spec
      - run: npm run test-build
      - run: npm run prepare-release-pages
      - run:
          name: Create mapbox-gl.tar.gz
          command: |
            TAR_PATH=mapbox-gl-${CIRCLE_TAG:-${CIRCLE_SHA1:0:6}}.tar.gz
            tar -czvf $TAR_PATH test/release dist
            mv $TAR_PATH test/release
      - store_artifacts:
          path: "dist"
      - store_artifacts:
          path: "test/release"
      - persist_to_workspace:
          root: ~/
          paths:
            - mapbox-gl-js/dist

  setup-playwright:
    <<: *linux-defaults
    steps:
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys:
            - v0-playwright-{{ checksum "package-lock.json" }}
      - run:
          name: Playwright version
          command: npx playwright --version
      - run: npx playwright install chromium
      - save_cache:
          key: v0-playwright-{{ checksum "package-lock.json" }}
          paths:
           - ~/.cache
      - persist_to_workspace:
          root: ~/
          paths:
            - .cache

  check-ts-suppressions:
    <<: *linux-defaults
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Add mbx-ci to PATH
          command: |
            echo 'export PATH=$HOME:$PATH' >> $BASH_ENV
            source $BASH_ENV
      - run:
          name: Check TypeScript error suppressions
          command: npm run check-ts-suppressions

  check-bundle-size:
    <<: *linux-defaults
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Add mbx-ci to PATH
          command: |
            echo 'export PATH=$HOME:$PATH' >> $BASH_ENV
            source $BASH_ENV
      - run:
          name: Check bundle size
          command: npm run check-bundle-size

  test-typings:
    <<: *linux-defaults
    steps:
      - attach_workspace:
          at: ~/
      - run: npm run build-dts
      - run:
          name: Test public typings
          command: |
            cd ./test/build/typings &&
            npm ci &&
            npm run tsc

  test-unit:
    <<: *linux-defaults
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Run unit tests
          command: |
            npm run test-unit
          no_output_timeout: 5m
      - store_artifacts:
          path: test/unit/vitest
      - store_test_results:
          path: test/unit/test-results.xml

  test-usvg:
    <<: *linux-defaults
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Run usvg tests
          command: |
            tar xvzf test/usvg/test-suite.tar.gz -C test/usvg/
            npm run test-usvg
          no_output_timeout: 5m
      - store_artifacts:
          path: test/usvg/vitest
      - store_test_results:
          path: test/usvg/test-results.xml

  test-query:
    <<: *linux-defaults
    steps:
      - attach_workspace:
          at: ~/
      - browser-tools/install-chrome
      - run: npm run test-query
      - store_test_results:
          path: test/integration/query-tests
      - store_artifacts:
          path: "test/integration/query-tests/index.html"

  test-csp:
    <<:  *linux-defaults
    steps:
      - attach_workspace:
          at: ~/
      - run:
          command: npm run test-csp
          no_output_timeout: 5m

  test-webpack:
    <<: *linux-defaults
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Build Webpack
          command: |
            cd ./test/build/transpilation &&
            npm ci &&
            npm run build &&
            rm -rf node_modules
      - store_artifacts:
          path: "test/build/transpilation"

  test-style-spec:
    <<: *linux-defaults
    steps:
      - attach_workspace:
          at: ~/
      - run: npm run test-style-spec

  verify-codegen:
    <<: *linux-defaults
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Verify codegen output
          command: |
            npm run codegen
            npm run build-typed-style-spec
            git add -A && git diff --staged --exit-code | tee check.patch
      - store_artifacts:
          path: "check.patch"

  test-expressions:
    <<: *linux-defaults
    steps:
      - attach_workspace:
          at: ~/
      - run: npm run test-expressions

  deploy-release:
    <<: *linux-defaults
    steps:
      - attach_workspace:
          at: ~/
      - aws-cli/install
      - run:
          name: Generate release list
          command: node build/generate-release-list.js
      - run:
          name: Check build file for correct SDK version
          command: |
            if grep -q "\"${CIRCLE_TAG:1}\"" ./dist/mapbox-gl.js; then
              echo SDK version in mapbox-gl.js matches ${CIRCLE_TAG:1}
            else
              echo SDK version in mapbox-gl.js does not match ${CIRCLE_TAG:1}
              exit 1
            fi
      - run:
          name: Deploy release
          command: |
            bash ./build/upload.sh

  test-render-linux-chrome-dev:
    <<: *linux-defaults
    steps:
      - attach_workspace:
          at: ~/
      - browser-tools/install-chrome
      - run:
          name: Running tests in parallel
          command: |
            npm run test-render
      - store_test_results:
          path: test/integration/render-tests
      - store_artifacts:
          path: "test/integration/render-tests/index.html"

  test-render-linux-chrome-prod:
    <<: *linux-defaults
    steps:
      - attach_workspace:
          at: ~/
      - browser-tools/install-chrome
      - run: npm run test-render-prod
      - store_test_results:
          path: test/integration/render-tests
      - store_artifacts:
          path: "test/integration/render-tests/index.html"

  test-render-linux-chrome-csp:
    <<: *linux-defaults
    steps:
      - attach_workspace:
          at: ~/
      - browser-tools/install-chrome
      - run: npm run test-render-csp
      - store_test_results:
          path: test/integration/render-tests
      - store_artifacts:
          path: "test/integration/render-tests/index.html"

  test-render-linux-firefox-dev:
    <<: *linux-defaults
    steps:
      - attach_workspace:
          at: ~/
      - browser-tools/install-firefox
      - run: npm run test-render-firefox
      - store_test_results:
          path: test/integration/render-tests
      - store_artifacts:
          path: "test/integration/render-tests/index.html"

  prepare-mac:
    <<: *mac-defaults
    steps:
      - checkout
      - restore_cache:
          keys:
            - v0-mac-npm-{{ .Branch }}-{{ checksum "package-lock.json" }}
            - v0-mac-npm-{{ .Branch }}-
            - v0-mac-npm-
      - run: nvm install && cat .nvmrc | nvm alias default `xargs`
      - run: npm ci --no-audit --no-fund
      - save_cache:
          key: v0-mac-npm-{{ .Branch }}-{{ checksum "package-lock.json" }}
          paths:
           - ~/.npm
      - run: npm run build-dev
      - persist_to_workspace:
          root: ~/
          paths:
            - mapbox-gl-js

  test-render-mac-chrome-dev:
    <<: *mac-defaults
    parallelism: 3
    steps:
      - attach_workspace:
          at: ~/
      - browser-tools/install-chrome
      - run:
          name: Creating test list
          command: |
            circleci tests glob "test/integration/render-tests/**/*.json" | circleci tests split --split-by=timings > tests-to-run.txt
      - run: npm run test-render
      - store_test_results:
          path: test/integration/render-tests
      - store_artifacts:
          path: "test/integration/render-tests/index.html"

  test-render-mac-safari-dev:
    <<: *mac-defaults
    steps:
      - attach_workspace:
          at: ~/
      - run: npm run test-render-safari
      - store_test_results:
          path: test/integration/render-tests
      - store_artifacts:
          path: "test/integration/render-tests/index.html"

  prepare-windows:
    <<: *windows-defaults
    steps:
      - checkout
      - restore_cache:
          keys:
            - v2-windows-npm-{{ .Branch }}-{{ checksum "package-lock.json" }}
            - v2-windows-npm-{{ .Branch }}-
            - v2-windows-npm-
      - run:
          name: Setup Node.js
          command: |
            $nodeVersion = Get-Content .nvmrc
            nvm install $nodeVersion
            nvm use $nodeVersion
      - run: npm ci --no-audit --no-fund --cache ~/.npm
      - save_cache:
          key: v2-windows-npm-{{ .Branch }}-{{ checksum "package-lock.json" }}
          paths:
            - ~/log.txt
      - store_artifacts:
          path: "test/integration/render-tests/index.html"
      - run: npm run build-dev
      - run:
          name: Clean up workspace to persist faster
          command: |
            Remove-Item .git -Recurse -Force;
            Remove-Item node_modules/@mapbox/mvt-fixtures/real-world/osm-qa-* -Recurse -Force;
            Remove-Item node_modules/@octokit -Recurse -Force;
      - persist_to_workspace:
          root: ~/
          paths:
            - mapbox-gl-js

  test-render-windows-chrome-dev:
    <<: *windows-defaults
    parallelism: 4
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Setup Node.js
          command: |
            $nodeVersion = Get-Content .nvmrc
            nvm install $nodeVersion
            nvm use $nodeVersion
      # The browser-tools orb doesn't work on Windows, so we install chrome manually.
      - run:
          name: Installing Chrome on Windows
          command: |
            $uri = "https://dl.google.com/chrome/install/latest/chrome_installer.exe";
            $path = "$PSScriptRoot\ChromeSetup.exe";
            Invoke-WebRequest -Uri $uri -OutFile $path;
            Start-Process $path /install -NoNewWindow -Wait;
            Remove-Item $path;

            $chromeInstalled = (Get-Item (Get-ItemProperty 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\App Paths\chrome.exe').'(Default)').VersionInfo;
            if ($chromeInstalled.FileName -eq $null) {
              Write-Host "Chrome failed to install";
            }
      - run:
          name: Creating test list
          command: |
            circleci tests glob "test/integration/render-tests/**/*.json" | circleci tests split | Out-File -Encoding utf8 -FilePath tests-to-run.txt
      - run: npm run test-render
      - store_test_results:
          path: test/integration/render-tests
      - store_artifacts:
          path: "test/integration/render-tests/index.html"

  trigger-performance-tests:
    <<: *linux-defaults
    steps:
      - checkout
      - run:
          name: Trigger SLA performance tests
          command: |
            sha=$(git rev-parse HEAD)
            response_code=$(curl --location --write-out "%{http_code}" --output /dev/stderr --request POST 'https://circleci.com/api/v2/project/github/mapbox/mapbox-gl-js-performance-internal/pipeline' --header 'Content-Type: application/json' -u $CIRCLECI_API_TOKEN: -d "{ \"parameters\": { \"setup_sha\": \"$sha\", \"setup_source_branch\": \"internal\" } }")

            if [[ "$response_code" =~ ^2 ]]; then
                echo "Success: HTTP 2xx response"
            else
                echo "Error: Non-2xx response code - $response_code"
                exit 1
            fi
