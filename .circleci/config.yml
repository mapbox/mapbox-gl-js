version: 2.1
orbs:
  aws-cli: circleci/aws-cli@3.1.4
  browser-tools: circleci/browser-tools@1.4.1
  macos: circleci/macos@2.3.4
  win: circleci/windows@4.1.1

workflows:
  version: 2
  default:
    jobs:
      - prepare-linux:
          filters:
            tags:
              only: /.*/
      - install-mbx-ci:
          requires:
              - prepare-linux
          filters:
            tags:
              only: /.*/
            # We can't install mbx-ci on CI runs from PR's that reference forks from external contributors
            # This is because fork's can not access our AWS credentials setup in CircleCI environment variables
            # Branch names for external contributor forks are are reported in the format pull/{PR_NUMBER} to CircleCI,
            # This RegEx is setup to ignore that.
            branches:
              ignore: /pull\/[0-9]*/
      - lint:
          requires:
            - prepare-linux
          filters:
            tags:
              only: /.*/
      - build:
          requires:
            - prepare-linux
          filters:
            tags:
              only: /.*/
      - check-bundle-size:
          requires:
            - install-mbx-ci
            - build
          filters:
            tags:
              only: /.*/
      - test-flow:
          requires:
            - prepare-linux
          filters:
            tags:
              only: /.*/
      - test-unit:
          requires:
            - prepare-linux
          filters:
            tags:
              only: /.*/
      - test-query:
          requires:
            - prepare-linux
          filters:
            tags:
              only: /.*/
      - test-expressions:
          requires:
            - prepare-linux
          filters:
            tags:
              only: /.*/
      - test-browser:
          requires:
            - prepare-linux
          filters:
            tags:
              only: /.*/
      - test-webpack:
          requires:
            - build
          filters:
            tags:
              only: /.*/
      - test-style-spec:
          requires:
            - prepare-linux
          filters:
            tags:
              only: /.*/
      - collect-stats:
          requires:
            - build
            - install-mbx-ci
          filters:
            tags:
              ignore: /.*/
            branches:
              only: main
      - deploy-benchmarks:
          requires:
            - install-mbx-ci
            - build
          filters:
            tags:
              only: /v[0-9]+.[0-9]+.[0-9]+(-.+)?/
            branches:
              only:
                - main
                - /release-.*/
      - deploy-release:
          requires:
            - install-mbx-ci
            - build
          filters:
            tags:
              only: /v[0-9]+.[0-9]+.[0-9]+(-.+)?/
            branches:
              ignore: /.*/
      - test-render-linux-chrome-dev:
          requires:
            - prepare-linux
          filters:
            tags:
              only: /.*/
      - test-render-linux-firefox-dev:
          requires:
            - prepare-linux
          filters:
            tags:
              only: /.*/
      - test-render-linux-chrome-prod:
          requires:
            - prepare-linux
          filters:
            tags:
              only: /.*/
      - test-render-linux-chrome-csp:
          requires:
            - prepare-linux
          filters:
            tags:
              only: /.*/
      - prepare-mac:
          filters:
            tags:
              only: /.*/
      - test-render-mac-chrome-dev:
          requires:
            - prepare-mac
          filters:
            tags:
              only: /.*/
      - test-render-mac-chrome-webgl2-dev:
          requires:
            - prepare-mac
          filters:
            tags:
              only: /.*/
      - prepare-windows:
          filters:
            tags:
              only: /.*/
      - test-render-windows-chrome-dev:
          requires:
            - prepare-windows
          filters:
            tags:
              only: /.*/

linux-defaults: &linux-defaults
  docker:
    - image: cimg/node:14.21-browsers
  working_directory: ~/mapbox-gl-js

mac-defaults: &mac-defaults
  macos:
    # https://circleci.com/docs/using-macos/#supported-xcode-versions
    xcode: 14.2.0 # macOS 12.6 (Monterey)
  working_directory: ~/mapbox-gl-js

windows-defaults: &windows-defaults
  executor:
    name: win/default
  working_directory: ~/mapbox-gl-js

jobs:
  prepare-linux:
    <<: *linux-defaults
    steps:
      - checkout
      - restore_cache:
          keys:
            - v0-linux-yarn-{{ .Branch }}-{{ checksum "yarn.lock" }}
            - v0-linux-yarn-{{ .Branch }}-
            - v0-linux-yarn-
      - run: yarn --frozen-lockfile --cache-folder ~/.cache/yarn
      - run: yarn run build-dev
      - save_cache:
          key: v0-linux-yarn-{{ .Branch }}-{{ checksum "yarn.lock" }}
          paths:
           - ~/.cache/yarn
      - persist_to_workspace:
          root: ~/
          paths:
            - mapbox-gl-js
            - .ssh

  install-mbx-ci:
    <<: *linux-defaults
    steps:
      - run:
          name: Install mbx-ci
          command: |
            curl -Ls https://mapbox-release-engineering.s3.amazonaws.com/mbx-ci/latest/mbx-ci-linux-amd64 > ~/mbx-ci &&
            chmod 755 ~/mbx-ci &&
            ~/mbx-ci aws setup
      # mbx-ci stores credentials in these directories, so they must be explictly passed along to dependent jobs via workspaces
      - persist_to_workspace:
          root: ~/
          paths:
            - .ssh
            - .aws
            - mbx-ci

  lint:
    <<: *linux-defaults
    steps:
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys:
            - v2-lint-{{ .Branch }}
            - v2-lint
      - run: yarn run lint
      - run: yarn run lint-css
      - save_cache:
          key: v2-lint-{{ .Branch }}-{{ .Revision }}
          paths:
            - '.eslintcache'

  build:
    <<: *linux-defaults
    steps:
      - attach_workspace:
          at: ~/
      - run: yarn run build-prod-min
      - run: yarn run build-prod
      - run: yarn run build-csp
      - run: yarn run build-css
      - run: yarn run build-style-spec
      - run: yarn run build-flow-types
      - run: yarn run test-build
      - run: while read l; do cp debug/$l test/release/$l; done < test/release/local_release_page_list.txt
      - store_artifacts:
          path: "dist"
      - store_artifacts:
          path: "test/release"
      - persist_to_workspace:
          root: ~/
          paths:
            - mapbox-gl-js/dist

  check-bundle-size:
    <<: *linux-defaults
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Check bundle size
          command: yarn check-bundle-size

  test-flow:
    <<: *linux-defaults
    steps:
      - attach_workspace:
          at: ~/
      - run: yarn run test-flow

  test-unit:
    <<: *linux-defaults
    steps:
      - attach_workspace:
          at: ~/
      - run: yarn run test-unit

  test-query:
    <<: *linux-defaults
    steps:
      - attach_workspace:
          at: ~/
      - browser-tools/install-chrome
      - run: yarn run test-query
      - store_test_results:
          path: test/integration/query-tests
      - store_artifacts:
          path: "test/integration/query-tests/index.html"

  test-webpack:
    <<: *linux-defaults
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Build Webpack
          command: |
            cd ./test/build/transpilation &&
            yarn &&
            npm run build &&
            rm -rf node_modules
      - store_artifacts:
          path: "test/build/transpilation"

  test-style-spec:
    <<: *linux-defaults
    steps:
      - attach_workspace:
          at: ~/
      - run: yarn run test-style-spec

  collect-stats:
    <<: *linux-defaults
    steps:
      - attach_workspace:
          at: ~/
      - browser-tools/install-chrome
      - run:
          name: Collect performance stats
          command: node bench/gl-stats.js
      - aws-cli/install
      - run:
          name: Upload performance stats
          command: aws s3 cp data.json.gz s3://mapbox-loading-dock/raw/gl_js.perf_metrics_staging/ci/`git show -s --date=short --format=%cd-%h HEAD`.json.gz

  test-browser:
    <<: *linux-defaults
    steps:
      - attach_workspace:
          at: ~/
      - browser-tools/install-browser-tools
      - run: yarn run build-token
      - run:
          name: Test Chrome
          environment:
            SELENIUM_BROWSER: chrome
            TAP_COLORS: 1
          command: yarn run test-browser
      - run:
          name: Test Firefox
          environment:
            SELENIUM_BROWSER: firefox
            TAP_COLORS: 1
          command: yarn run test-browser

  test-expressions:
    <<: *linux-defaults
    steps:
      - attach_workspace:
          at: ~/
      - run: yarn run test-expressions

  deploy-benchmarks:
    <<: *linux-defaults
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Build
          command: BENCHMARK_VERSION="${CIRCLE_TAG:-$CIRCLE_BRANCH} $(git rev-parse --short=7 HEAD)" yarn run build-benchmarks
      - aws-cli/install
      - run:
          name: Upload benchmark
          command: aws s3 cp --acl public-read --content-type application/javascript bench/versions/benchmarks_generated.js s3://mapbox-gl-js/${CIRCLE_TAG:-$CIRCLE_BRANCH}/benchmarks.js
      - run:
          name: Upload source maps
          command: aws s3 cp --acl public-read --content-type application/javascript bench/versions/benchmarks_generated.js.map s3://mapbox-gl-js/${CIRCLE_TAG:-$CIRCLE_BRANCH}/benchmarks.js.map

  deploy-release:
    <<: *linux-defaults
    steps:
      - attach_workspace:
          at: ~/
      - aws-cli/install
      - run:
          name: Check build file for correct SDK version
          command: |
            if grep -q "\"${CIRCLE_TAG:1}\"" ./dist/mapbox-gl.js; then
              echo SDK version in mapbox-gl.js matches ${CIRCLE_TAG:1}
            else
              echo SDK version in mapbox-gl.js does not match ${CIRCLE_TAG:1}
              exit 1
            fi
      - run:
          name: Deploy release
          command: |
            bash ./build/upload.sh

  test-render-linux-chrome-dev:
    <<: *linux-defaults
    steps:
      - attach_workspace:
          at: ~/
      - browser-tools/install-chrome
      - run:
          name: Running tests in parallel
          command: |
            yarn run test-render
      - store_test_results:
          path: test/integration/render-tests
      - store_artifacts:
          path: "test/integration/render-tests/index.html"

  test-render-linux-chrome-prod:
    <<: *linux-defaults
    steps:
      - attach_workspace:
          at: ~/
      - browser-tools/install-chrome
      - run: yarn run test-render-prod
      - store_test_results:
          path: test/integration/render-tests
      - store_artifacts:
          path: "test/integration/render-tests/index.html"

  test-render-linux-chrome-csp:
    <<: *linux-defaults
    steps:
      - attach_workspace:
          at: ~/
      - browser-tools/install-chrome
      - run: yarn run test-render-csp
      - store_test_results:
          path: test/integration/render-tests
      - store_artifacts:
          path: "test/integration/render-tests/index.html"

  test-render-linux-firefox-dev:
    <<: *linux-defaults
    steps:
      - attach_workspace:
          at: ~/
      - browser-tools/install-firefox
      - run: yarn run test-render-firefox
      - store_test_results:
          path: test/integration/render-tests
      - store_artifacts:
          path: "test/integration/render-tests/index.html"

  prepare-mac:
    <<: *mac-defaults
    steps:
      - checkout
      - restore_cache:
          keys:
            - v0-mac-yarn-{{ .Branch }}-{{ checksum "yarn.lock" }}
            - v0-mac-yarn-{{ .Branch }}-
            - v0-mac-yarn-
      - run: nvm install && cat .nvmrc | nvm alias default `xargs`
      - run: yarn --frozen-lockfile --cache-folder ~/.cache/yarn
      - save_cache:
          key: v0-mac-yarn-{{ .Branch }}-{{ checksum "yarn.lock" }}
          paths:
           - ~/.cache/yarn
      - run: yarn run build-dev
      - persist_to_workspace:
          root: ~/
          paths:
            - mapbox-gl-js

  test-render-mac-chrome-dev:
    <<: *mac-defaults
    parallelism: 3
    steps:
      - attach_workspace:
          at: ~/
      - browser-tools/install-chrome
      - run:
          name: Creating test list
          command: |
            circleci tests glob "test/integration/render-tests/**/*.json" | circleci tests split --split-by=timings > tests-to-run.txt
      - run: yarn run test-render
      - store_test_results:
          path: test/integration/render-tests
      - store_artifacts:
          path: "test/integration/render-tests/index.html"

  test-render-mac-chrome-webgl2-dev:
    <<: *mac-defaults
    parallelism: 3
    steps:
      - attach_workspace:
          at: ~/
      - browser-tools/install-chrome
      - run:
          name: Creating test list
          command: |
            circleci tests glob "test/integration/render-tests/**/*.json" | circleci tests split --split-by=timings > tests-to-run.txt
      - run: USE_WEBGL2=true yarn run test-render
      - store_test_results:
          path: test/integration/render-tests
      - store_artifacts:
          path: "test/integration/render-tests/index.html"

  prepare-windows:
    <<: *windows-defaults
    steps:
      - checkout
      - run: $NodeVersion = Get-Content -Path .\.nvmrc; nvm install $NodeVersion; nvm use $NodeVersion
      - run: npm install --global yarn
      - run: yarn --frozen-lockfile
      - run: yarn run build-dev
      - run:
          name: Clean up workspace to persist faster
          command: |
            Remove-Item .git -Recurse -Force;
            Remove-Item node_modules/flow-bin -Recurse -Force;
            Remove-Item node_modules/tap -Recurse -Force;
            Remove-Item node_modules/gl -Recurse -Force;
            Remove-Item node_modules/@mapbox/mvt-fixtures/real-world/osm-qa-* -Recurse -Force;
            Remove-Item node_modules/react-devtools-core -Recurse -Force;
            Remove-Item node_modules/@octokit -Recurse -Force;
            Remove-Item node_modules/puppeteer-core -Recurse -Force;
            Remove-Item node_modules/lodash -Recurse -Force;
      - persist_to_workspace:
          root: ~/
          paths:
            - mapbox-gl-js

  test-render-windows-chrome-dev:
    <<: *windows-defaults
    parallelism: 4
    steps:
      - attach_workspace:
          at: ~/
      # The browser-tools orb doesn't work on Windows, so we install chrome manually.
      - run:
          name: Installing Chrome on Windows
          command: |
            $uri = "https://dl.google.com/chrome/install/latest/chrome_installer.exe";
            $path = "$PSScriptRoot\ChromeSetup.exe";
            Invoke-WebRequest -Uri $uri -OutFile $path;
            Start-Process $path /install -NoNewWindow -Wait;
            Remove-Item $path;

            $chromeInstalled = (Get-Item (Get-ItemProperty 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\App Paths\chrome.exe').'(Default)').VersionInfo;
            if ($chromeInstalled.FileName -eq $null) {
              Write-Host "Chrome failed to install";
            }
      - run:
          name: Creating test list
          command: |
            circleci tests glob "test/integration/render-tests/**/*.json" | circleci tests split | Out-File -Encoding utf8 -FilePath tests-to-run.txt
      - run: yarn run test-render
      - store_test_results:
          path: test/integration/render-tests
      - store_artifacts:
          path: "test/integration/render-tests/index.html"
